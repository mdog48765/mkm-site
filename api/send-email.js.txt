// /api/send-email.js
import { Resend } from "resend";

const VERSION = "route-strict-003"; // <-- we will look for this

const resend = new Resend(process.env.RESEND_API_KEY);
const FROM = process.env.RESEND_FROM || "no-reply@mkmentertainmentllc.com";
const MKM = "michaelkylemusic@icloud.com";
const PIZZA = "pizzarecords@aol.com";

export default async function handler(req, res) {
  // CORS + NO CACHE (avoid any edge caching confusion)
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "POST,GET,OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
  res.setHeader("Cache-Control", "no-store, max-age=0");

  if (req.method === "OPTIONS") return res.status(200).end();

  if (req.method === "GET") {
    return res.status(200).json({ ok: true, route: "/api/send-email", version: VERSION });
  }

  if (req.method !== "POST") return res.status(405).json({ error: "Method not allowed" });

  try {
    const {
      name = "",
      email = "",
      phone = "",
      service = "",
      date = "",
      message = "",
      bookingType = "",
      selectedService = "",
      addOns = [],
      subject = "MKM Booking Request",
    } = req.body || {};

    const normalizedType = (bookingType || "").trim().toLowerCase();
    const isPizza = normalizedType === "pizza records"; // STRICT equality

    const textBody = `
Booking Type: ${bookingType || "N/A"}
Selected Service: ${selectedService || service || "N/A"}
Add-Ons: ${Array.isArray(addOns) && addOns.length ? addOns.join(", ") : "None"}
Event Date: ${date || "Not specified"}

From: ${name || "(no name)"}
Email: ${email || "(no email)"}
Phone: ${phone || "(no phone)"}

Message:
${message || "(no message)"}
`.trim();

    async function sendOne(to) {
      const r = await resend.emails.send({
        from: `MKM Website <${FROM}>`,
        to,
        subject,
        text: textBody,
        reply_to: email || undefined,
        headers: { "List-Unsubscribe": "<mailto:no-reply@mkmentertainmentllc.com>" },
      });
      return { to, id: r?.data?.id || null, error: r?.error || null };
    }

    const recipients = [MKM];
    if (isPizza) recipients.push(PIZZA);

    console.log("Routing email", { version: VERSION, bookingType, normalizedType, recipients });

    const results = [];
    for (const to of recipients) {
      // eslint-disable-next-line no-await-in-loop
      results.push(await sendOne(to));
    }

    const mkmResult = results.find(r => r.to === MKM);
    if (!mkmResult || mkmResult.error) {
      return res.status(502).json({ ok: false, error: "MKM delivery failed", details: mkmResult || null });
    }

    return res.status(200).json({ ok: true, version: VERSION, results });
  } catch (e) {
    console.error("Email handler error:", e);
    return res.status(500).json({ ok: false, error: "Server error", details: e?.message || String(e) });
  }
}
